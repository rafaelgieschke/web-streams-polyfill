{"version":3,"file":"polyfill.min.js","sources":["../src/utils.js","../src/stub/min/better-assert.js","../spec/reference-implementation/lib/helpers.js","../spec/reference-implementation/lib/utils.js","../spec/reference-implementation/lib/queue-with-sizes.js","../src/stub/min/debug.js","../spec/reference-implementation/lib/writable-stream.js","../spec/reference-implementation/lib/readable-stream.js","../spec/reference-implementation/lib/byte-length-queuing-strategy.js","../spec/reference-implementation/lib/count-queuing-strategy.js","../spec/reference-implementation/lib/transform-stream.js","../src/polyfill.js"],"sourcesContent":["export function noop() {\n  // do nothing\n}\n\nfunction getGlobals() {\n  /* global self, window, global */\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","import { noop } from '../../utils';\n\nexport const AssertionError = undefined;\n\nconst assert = noop;\nexport default assert;\n","'use strict';\nconst assert = require('better-assert');\n\nconst isFakeDetached = Symbol('is \"detached\" for our purposes');\n\nfunction IsPropertyKey(argument) {\n  return typeof argument === 'string' || typeof argument === 'symbol';\n}\n\nexports.typeIsObject = x => (typeof x === 'object' && x !== null) || typeof x === 'function';\n\nexports.createDataProperty = (o, p, v) => {\n  assert(exports.typeIsObject(o));\n  Object.defineProperty(o, p, { value: v, writable: true, enumerable: true, configurable: true });\n};\n\nexports.createArrayFromList = elements => {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice();\n};\n\nexports.ArrayBufferCopy = (dest, destOffset, src, srcOffset, n) => {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n};\n\nexports.CreateIterResultObject = (value, done) => {\n  assert(typeof done === 'boolean');\n  const obj = {};\n  Object.defineProperty(obj, 'value', { value, enumerable: true, writable: true, configurable: true });\n  Object.defineProperty(obj, 'done', { value: done, enumerable: true, writable: true, configurable: true });\n  return obj;\n};\n\nexports.IsFiniteNonNegativeNumber = v => {\n  if (exports.IsNonNegativeNumber(v) === false) {\n    return false;\n  }\n\n  if (v === Infinity) {\n    return false;\n  }\n\n  return true;\n};\n\nexports.IsNonNegativeNumber = v => {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (Number.isNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction Call(F, V, args) {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexports.Call = Call;\n\nexports.CreateAlgorithmFromUnderlyingMethod = (underlyingObject, methodName, algoArgCount, extraArgs) => {\n  assert(underlyingObject !== undefined);\n  assert(IsPropertyKey(methodName));\n  assert(algoArgCount === 0 || algoArgCount === 1);\n  assert(Array.isArray(extraArgs));\n  const method = underlyingObject[methodName];\n  if (method !== undefined) {\n    if (typeof method !== 'function') {\n      throw new TypeError(`${method} is not a method`);\n    }\n    switch (algoArgCount) {\n      case 0: {\n        return () => {\n          return PromiseCall(method, underlyingObject, extraArgs);\n        };\n      }\n\n      case 1: {\n        return arg => {\n          const fullArgs = [arg].concat(extraArgs);\n          return PromiseCall(method, underlyingObject, fullArgs);\n        };\n      }\n    }\n  }\n  return () => Promise.resolve();\n};\n\nexports.InvokeOrNoop = (O, P, args) => {\n  assert(O !== undefined);\n  assert(IsPropertyKey(P));\n  assert(Array.isArray(args));\n\n  const method = O[P];\n  if (method === undefined) {\n    return undefined;\n  }\n\n  return Call(method, O, args);\n};\n\nfunction PromiseCall(F, V, args) {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return Promise.resolve(Call(F, V, args));\n  } catch (value) {\n    return Promise.reject(value);\n  }\n}\n\nexports.PromiseCall = PromiseCall;\n\n// Not implemented correctly\nexports.TransferArrayBuffer = O => {\n  assert(!exports.IsDetachedBuffer(O));\n  const transferredIshVersion = O.slice();\n\n  // This is specifically to fool tests that test \"is transferred\" by taking a non-zero-length\n  // ArrayBuffer and checking if its byteLength starts returning 0.\n  Object.defineProperty(O, 'byteLength', {\n    get() {\n      return 0;\n    }\n  });\n  O[isFakeDetached] = true;\n\n  return transferredIshVersion;\n};\n\n// Not implemented correctly\nexports.IsDetachedBuffer = O => {\n  return isFakeDetached in O;\n};\n\nexports.ValidateAndNormalizeHighWaterMark = highWaterMark => {\n  highWaterMark = Number(highWaterMark);\n  if (Number.isNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('highWaterMark property of a queuing strategy must be non-negative and non-NaN');\n  }\n\n  return highWaterMark;\n};\n\nexports.MakeSizeAlgorithmFromSizeFunction = size => {\n  if (size === undefined) {\n    return () => 1;\n  }\n  if (typeof size !== 'function') {\n    throw new TypeError('size property of a queuing strategy must be a function');\n  }\n  return chunk => size(chunk);\n};\n","'use strict';\nconst assert = require('better-assert');\n\nexports.rethrowAssertionErrorRejection = e => {\n  // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n  // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n  // expect any errors, but assertion errors are always problematic.\n  if (e && e.constructor === assert.AssertionError) {\n    setTimeout(() => {\n      throw e;\n    }, 0);\n  }\n};\n","'use strict';\nconst assert = require('better-assert');\nconst { IsFiniteNonNegativeNumber } = require('./helpers.js');\n\nexports.DequeueValue = container => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift();\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n};\n\nexports.EnqueueValueWithSize = (container, value, size) => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  size = Number(size);\n  if (!IsFiniteNonNegativeNumber(size)) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n};\n\nexports.PeekQueueValue = container => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue[0];\n  return pair.value;\n};\n\nexports.ResetQueue = container => {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = [];\n  container._queueTotalSize = 0;\n};\n","import { noop } from '../../utils';\n\nconst debug = noop;\nexport default debug;\n","'use strict';\nconst assert = require('better-assert');\n\n// Calls to verbose() are purely for debugging the reference implementation and tests. They are not part of the standard\n// and do not appear in the standard text.\nconst verbose = require('debug')('streams:writable-stream:verbose');\n\nconst { CreateAlgorithmFromUnderlyingMethod, InvokeOrNoop, ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber,\n        MakeSizeAlgorithmFromSizeFunction, typeIsObject } = require('./helpers.js');\nconst { rethrowAssertionErrorRejection } = require('./utils.js');\nconst { DequeueValue, EnqueueValueWithSize, PeekQueueValue, ResetQueue } = require('./queue-with-sizes.js');\n\nconst AbortSteps = Symbol('[[AbortSteps]]');\nconst ErrorSteps = Symbol('[[ErrorSteps]]');\n\nclass WritableStream {\n  constructor(underlyingSink = {}, { size, highWaterMark = 1 } = {}) {\n    InitializeWritableStream(this);\n\n    const type = underlyingSink.type;\n\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(size);\n    highWaterMark = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  get locked() {\n    if (IsWritableStream(this) === false) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  abort(reason) {\n    if (IsWritableStream(this) === false) {\n      return Promise.reject(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this) === true) {\n      return Promise.reject(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  getWriter() {\n    if (IsWritableStream(this) === false) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nmodule.exports = {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter(stream) {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1,\n                              sizeAlgorithm = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark) === true);\n\n  const stream = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream(stream) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = [];\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsWritableStreamLocked(stream) {\n  assert(IsWritableStream(stream) === true);\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream, reason) {\n  const state = stream._state;\n  if (state === 'closed') {\n    return Promise.resolve(undefined);\n  }\n  if (state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n  const error = new TypeError('Requested to abort');\n  if (stream._pendingAbortRequest !== undefined) {\n    return Promise.reject(error);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n\n  if (wasAlreadyErroring === false) {\n    WritableStreamStartErroring(stream, error);\n  }\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream) {\n  assert(IsWritableStreamLocked(stream) === true);\n  assert(stream._state === 'writable');\n\n  const promise = new Promise((resolve, reject) => {\n    const writeRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream, error) {\n  verbose('WritableStreamDealWithRejection(stream, %o)', error);\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream, reason) {\n  verbose('WritableStreamStartErroring(stream, %o)', reason);\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (WritableStreamHasOperationMarkedInFlight(stream) === false && controller._started === true) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream) {\n  verbose('WritableStreamFinishErroring()');\n  assert(stream._state === 'erroring');\n  assert(WritableStreamHasOperationMarkedInFlight(stream) === false);\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  for (const writeRequest of stream._writeRequests) {\n    writeRequest._reject(storedError);\n  }\n  stream._writeRequests = [];\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring === true) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  promise.then(\n      () => {\n        abortRequest._resolve();\n        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      },\n      reason => {\n        abortRequest._reject(reason);\n        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream, error) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream, error) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream) {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream) {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    verbose('WritableStreamHasOperationMarkedInFlight() is false');\n    return false;\n  }\n\n  verbose('WritableStreamHasOperationMarkedInFlight() is true');\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n  verbose('WritableStreamRejectCloseAndClosedPromiseIfNeeded()');\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n    writer._closedPromise.catch(() => {});\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream, backpressure) {\n  assert(stream._state === 'writable');\n  assert(WritableStreamCloseQueuedOrInFlight(stream) === false);\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure === true) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(backpressure === false);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\nclass WritableStreamDefaultWriter {\n  constructor(stream) {\n    if (IsWritableStream(stream) === false) {\n      throw new TypeError('WritableStreamDefaultWriter can only be constructed with a WritableStream instance');\n    }\n    if (IsWritableStreamLocked(stream) === true) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (WritableStreamCloseQueuedOrInFlight(stream) === false && stream._backpressure === true) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      this._readyPromise.catch(() => {});\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      this._readyPromise.catch(() => {});\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n      this._closedPromise.catch(() => {});\n    }\n  }\n\n  get closed() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  get desiredSize() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  get ready() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  abort(reason) {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return Promise.reject(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  close() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return Promise.reject(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream) === true) {\n      return Promise.reject(new TypeError('cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  releaseLock() {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  write(chunk) {\n    if (IsWritableStreamDefaultWriter(this) === false) {\n      return Promise.reject(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return Promise.reject(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer, reason) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return Promise.reject(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(WritableStreamCloseQueuedOrInFlight(stream) === false);\n\n  const promise = new Promise((resolve, reject) => {\n    const closeRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  if (stream._backpressure === true && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) === true || state === 'closed') {\n    return Promise.resolve();\n  }\n\n  if (state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n  writer._closedPromise.catch(() => {});\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n  verbose('WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, %o)', error);\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n  writer._readyPromise.catch(() => {});\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer) {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    'Writer was released and can no longer be used to monitor the stream\\'s closedness');\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined;\n}\n\nfunction WritableStreamDefaultWriterWrite(writer, chunk) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return Promise.reject(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) === true || state === 'closed') {\n    return Promise.reject(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return Promise.reject(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nclass WritableStreamDefaultController {\n  constructor() {\n    throw new TypeError('WritableStreamDefaultController cannot be constructed explicitly');\n  }\n\n  error(e) {\n    if (IsWritableStreamDefaultController(this) === false) {\n      throw new TypeError(\n        'WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  [AbortSteps](reason) {\n    return this._abortAlgorithm(reason);\n  }\n\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                              abortAlgorithm, highWaterMark, sizeAlgorithm) {\n  assert(IsWritableStream(stream) === true);\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined;\n  controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = Promise.resolve(startResult);\n  startPromise.then(\n      () => {\n        assert(stream._state === 'writable' || stream._state === 'erroring');\n        controller._started = true;\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n      },\n      r => {\n        assert(stream._state === 'writable' || stream._state === 'erroring');\n        controller._started = true;\n        WritableStreamDealWithRejection(stream, r);\n      }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n  assert(underlyingSink !== undefined);\n\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  function startAlgorithm() {\n    return InvokeOrNoop(underlyingSink, 'start', [controller]);\n  }\n\n  const writeAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSink, 'write', 1, [controller]);\n  const closeAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSink, 'close', 0, []);\n  const abortAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSink, 'abort', 1, []);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n}\n\nfunction WritableStreamDefaultControllerClose(controller) {\n  EnqueueValueWithSize(controller, 'close', 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller) {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n  const writeRecord = { chunk };\n\n  try {\n    EnqueueValueWithSize(controller, writeRecord, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (WritableStreamCloseQueuedOrInFlight(stream) === false && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n  verbose('WritableStreamDefaultControllerAdvanceQueueIfNeeded()');\n  const stream = controller._controlledWritableStream;\n\n  if (controller._started === false) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return;\n  }\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const writeRecord = PeekQueueValue(controller);\n  if (writeRecord === 'close') {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, writeRecord.chunk);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  sinkClosePromise.then(\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  sinkWritePromise.then(\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (WritableStreamCloseQueuedOrInFlight(stream) === false && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller) {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller, error) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name) {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name) {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name) {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer) {\n  writer._closedPromise = new Promise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n  writer._closedPromise = Promise.reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer) {\n  writer._closedPromise = Promise.resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterClosedPromiseReject(writer, reason) {\n  assert(writer._closedPromise_resolve !== undefined);\n  assert(writer._closedPromise_reject !== undefined);\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer, reason) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  writer._closedPromise = Promise.reject(reason);\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResolve(writer) {\n  assert(writer._closedPromise_resolve !== undefined);\n  assert(writer._closedPromise_reject !== undefined);\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer) {\n  verbose('defaultWriterReadyPromiseInitialize()');\n  writer._readyPromise = new Promise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n  verbose('defaultWriterReadyPromiseInitializeAsRejected(writer, %o)', reason);\n  writer._readyPromise = Promise.reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer) {\n  verbose('defaultWriterReadyPromiseInitializeAsResolved()');\n  writer._readyPromise = Promise.resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n\nfunction defaultWriterReadyPromiseReject(writer, reason) {\n  verbose('defaultWriterReadyPromiseReject(writer, %o)', reason);\n  assert(writer._readyPromise_resolve !== undefined);\n  assert(writer._readyPromise_reject !== undefined);\n\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer) {\n  verbose('defaultWriterReadyPromiseReset()');\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  writer._readyPromise = new Promise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer, reason) {\n  verbose('defaultWriterReadyPromiseResetToRejected(writer, %o)', reason);\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  writer._readyPromise = Promise.reject(reason);\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseResolve(writer) {\n  verbose('defaultWriterReadyPromiseResolve()');\n  assert(writer._readyPromise_resolve !== undefined);\n  assert(writer._readyPromise_reject !== undefined);\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","'use strict';\nconst assert = require('better-assert');\nconst { ArrayBufferCopy, CreateAlgorithmFromUnderlyingMethod, CreateIterResultObject, IsFiniteNonNegativeNumber,\n        InvokeOrNoop, IsDetachedBuffer, TransferArrayBuffer, ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber,\n        MakeSizeAlgorithmFromSizeFunction, createArrayFromList, typeIsObject } = require('./helpers.js');\nconst { rethrowAssertionErrorRejection } = require('./utils.js');\nconst { DequeueValue, EnqueueValueWithSize, ResetQueue } = require('./queue-with-sizes.js');\nconst { AcquireWritableStreamDefaultWriter, IsWritableStream, IsWritableStreamLocked,\n        WritableStreamAbort, WritableStreamDefaultWriterCloseWithErrorPropagation,\n        WritableStreamDefaultWriterRelease, WritableStreamDefaultWriterWrite, WritableStreamCloseQueuedOrInFlight } =\n      require('./writable-stream.js');\n\nconst CancelSteps = Symbol('[[CancelSteps]]');\nconst PullSteps = Symbol('[[PullSteps]]');\n\nclass ReadableStream {\n  constructor(underlyingSource = {}, { size, highWaterMark } = {}) {\n    InitializeReadableStream(this);\n    const type = underlyingSource.type;\n    const typeString = String(type);\n    if (typeString === 'bytes') {\n      if (highWaterMark === undefined) {\n        highWaterMark = 0;\n      }\n      highWaterMark = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n      if (size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n\n      SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n    } else if (type === undefined) {\n      if (highWaterMark === undefined) {\n        highWaterMark = 1;\n      }\n      highWaterMark = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n      const sizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(size);\n\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n    } else {\n      throw new RangeError('Invalid type is specified');\n    }\n  }\n\n  get locked() {\n    if (IsReadableStream(this) === false) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  cancel(reason) {\n    if (IsReadableStream(this) === false) {\n      return Promise.reject(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this) === true) {\n      return Promise.reject(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  getReader({ mode } = {}) {\n    if (IsReadableStream(this) === false) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    if (mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    mode = String(mode);\n\n    if (mode === 'byob') {\n      return AcquireReadableStreamBYOBReader(this);\n    }\n\n    throw new RangeError('Invalid mode is specified');\n  }\n\n  pipeThrough({ writable, readable }, options) {\n    if (writable === undefined || readable === undefined) {\n      throw new TypeError('readable and writable arguments must be defined');\n    }\n\n    const promise = this.pipeTo(writable, options);\n\n    ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue(promise);\n\n    return readable;\n  }\n\n  pipeTo(dest, { preventClose, preventAbort, preventCancel } = {}) {\n    if (IsReadableStream(this) === false) {\n      return Promise.reject(streamBrandCheckException('pipeTo'));\n    }\n    if (IsWritableStream(dest) === false) {\n      return Promise.reject(\n        new TypeError('ReadableStream.prototype.pipeTo\\'s first argument must be a WritableStream'));\n    }\n\n    preventClose = Boolean(preventClose);\n    preventAbort = Boolean(preventAbort);\n    preventCancel = Boolean(preventCancel);\n\n    if (IsReadableStreamLocked(this) === true) {\n      return Promise.reject(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n    }\n    if (IsWritableStreamLocked(dest) === true) {\n      return Promise.reject(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n    }\n\n    const reader = AcquireReadableStreamDefaultReader(this);\n    const writer = AcquireWritableStreamDefaultWriter(dest);\n\n    let shuttingDown = false;\n\n    // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n    let currentWrite = Promise.resolve();\n\n    return new Promise((resolve, reject) => {\n      // Using reader and writer, read all chunks from this and write them to dest\n      // - Backpressure must be enforced\n      // - Shutdown must stop all activity\n      function pipeLoop() {\n        if (shuttingDown === true) {\n          return Promise.resolve();\n        }\n\n        return writer._readyPromise.then(() => {\n          return ReadableStreamDefaultReaderRead(reader).then(({ value, done }) => {\n            if (done === true) {\n              return;\n            }\n\n            currentWrite = WritableStreamDefaultWriterWrite(writer, value).catch(() => {});\n          });\n        })\n        .then(pipeLoop);\n      }\n\n      // Errors must be propagated forward\n      isOrBecomesErrored(this, reader._closedPromise, storedError => {\n        if (preventAbort === false) {\n          shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      });\n\n      // Errors must be propagated backward\n      isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n        if (preventCancel === false) {\n          shutdownWithAction(() => ReadableStreamCancel(this, storedError), true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      });\n\n      // Closing must be propagated forward\n      isOrBecomesClosed(this, reader._closedPromise, () => {\n        if (preventClose === false) {\n          shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n        } else {\n          shutdown();\n        }\n      });\n\n      // Closing must be propagated backward\n      if (WritableStreamCloseQueuedOrInFlight(dest) === true || dest._state === 'closed') {\n        const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n        if (preventCancel === false) {\n          shutdownWithAction(() => ReadableStreamCancel(this, destClosed), true, destClosed);\n        } else {\n          shutdown(true, destClosed);\n        }\n      }\n\n      pipeLoop().catch(err => {\n        currentWrite = Promise.resolve();\n        rethrowAssertionErrorRejection(err);\n      });\n\n      function waitForWritesToFinish() {\n        // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n        // for that too.\n        const oldCurrentWrite = currentWrite;\n        return currentWrite.then(() => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n      }\n\n      function isOrBecomesErrored(stream, promise, action) {\n        if (stream._state === 'errored') {\n          action(stream._storedError);\n        } else {\n          promise.catch(action).catch(rethrowAssertionErrorRejection);\n        }\n      }\n\n      function isOrBecomesClosed(stream, promise, action) {\n        if (stream._state === 'closed') {\n          action();\n        } else {\n          promise.then(action).catch(rethrowAssertionErrorRejection);\n        }\n      }\n\n      function shutdownWithAction(action, originalIsError, originalError) {\n        if (shuttingDown === true) {\n          return;\n        }\n        shuttingDown = true;\n\n        if (dest._state === 'writable' && WritableStreamCloseQueuedOrInFlight(dest) === false) {\n          waitForWritesToFinish().then(doTheRest);\n        } else {\n          doTheRest();\n        }\n\n        function doTheRest() {\n          action().then(\n            () => finalize(originalIsError, originalError),\n            newError => finalize(true, newError)\n          )\n          .catch(rethrowAssertionErrorRejection);\n        }\n      }\n\n      function shutdown(isError, error) {\n        if (shuttingDown === true) {\n          return;\n        }\n        shuttingDown = true;\n\n        if (dest._state === 'writable' && WritableStreamCloseQueuedOrInFlight(dest) === false) {\n          waitForWritesToFinish().then(() => finalize(isError, error)).catch(rethrowAssertionErrorRejection);\n        } else {\n          finalize(isError, error);\n        }\n      }\n\n      function finalize(isError, error) {\n        WritableStreamDefaultWriterRelease(writer);\n        ReadableStreamReaderGenericRelease(reader);\n\n        if (isError) {\n          reject(error);\n        } else {\n          resolve(undefined);\n        }\n      }\n    });\n  }\n\n  tee() {\n    if (IsReadableStream(this) === false) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return createArrayFromList(branches);\n  }\n}\n\nmodule.exports = {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  ReadableStream,\n  IsReadableStreamDisturbed,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure,\n  ReadableStreamDefaultControllerCanCloseOrEnqueue\n};\n\n// Abstract operations for the ReadableStream.\n\nfunction AcquireReadableStreamBYOBReader(stream) {\n  return new ReadableStreamBYOBReader(stream);\n}\n\nfunction AcquireReadableStreamDefaultReader(stream) {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1,\n                              sizeAlgorithm = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark) === true);\n\n  const stream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller = Object.create(ReadableStreamDefaultController.prototype);\n\n  SetUpReadableStreamDefaultController(\n      stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 0,\n                                  autoAllocateChunkSize = undefined) {\n  assert(IsNonNegativeNumber(highWaterMark) === true);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(Number.isInteger(autoAllocateChunkSize) === true);\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  const stream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller = Object.create(ReadableByteStreamController.prototype);\n\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark,\n                                    autoAllocateChunkSize);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nfunction IsReadableStream(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsReadableStreamDisturbed(stream) {\n  assert(IsReadableStream(stream) === true);\n\n  return stream._disturbed;\n}\n\nfunction IsReadableStreamLocked(stream) {\n  assert(IsReadableStream(stream) === true);\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamTee(stream, cloneForBranch2) {\n  assert(IsReadableStream(stream) === true);\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader(stream);\n\n  let closedOrErrored = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1;\n  let reason2;\n  let branch1;\n  let branch2;\n\n  let resolveCancelPromise;\n  const cancelPromise = new Promise(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm() {\n    return ReadableStreamDefaultReaderRead(reader).then(result => {\n      assert(typeIsObject(result));\n      const value = result.value;\n      const done = result.done;\n      assert(typeof done === 'boolean');\n\n      if (done === true && closedOrErrored === false) {\n        if (canceled1 === false) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n        }\n        if (canceled2 === false) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n        }\n        closedOrErrored = true;\n      }\n\n      if (closedOrErrored === true) {\n        return;\n      }\n\n      const value1 = value;\n      const value2 = value;\n\n      // There is no way to access the cloning code right now in the reference implementation.\n      // If we add one then we'll need an implementation for serializable objects.\n      // if (canceled2 === false && cloneForBranch2 === true) {\n      //   value2 = StructuredDeserialize(StructuredSerialize(value2));\n      // }\n\n      if (canceled1 === false) {\n        ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, value1);\n      }\n\n      if (canceled2 === false) {\n        ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, value2);\n      }\n    });\n  }\n\n  function cancel1Algorithm(reason) {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2 === true) {\n      const compositeReason = createArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason) {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1 === true) {\n      const compositeReason = createArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {}\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  reader._closedPromise.catch(r => {\n    if (closedOrErrored === true) {\n      return;\n    }\n\n    ReadableStreamDefaultControllerErrorIfNeeded(branch1._readableStreamController, r);\n    ReadableStreamDefaultControllerErrorIfNeeded(branch2._readableStreamController, r);\n    closedOrErrored = true;\n  });\n\n  return [branch1, branch2];\n}\n\n// ReadableStream API exposed for controllers.\n\nfunction ReadableStreamAddReadIntoRequest(stream) {\n  assert(IsReadableStreamBYOBReader(stream._reader) === true);\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  const promise = new Promise((resolve, reject) => {\n    const readIntoRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._reader._readIntoRequests.push(readIntoRequest);\n  });\n\n  return promise;\n}\n\nfunction ReadableStreamAddReadRequest(stream) {\n  assert(IsReadableStreamDefaultReader(stream._reader) === true);\n  assert(stream._state === 'readable');\n\n  const promise = new Promise((resolve, reject) => {\n    const readRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._reader._readRequests.push(readRequest);\n  });\n\n  return promise;\n}\n\nfunction ReadableStreamCancel(stream, reason) {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return Promise.resolve(undefined);\n  }\n  if (stream._state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return sourceCancelPromise.then(() => undefined);\n}\n\nfunction ReadableStreamClose(stream) {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return undefined;\n  }\n\n  if (IsReadableStreamDefaultReader(reader) === true) {\n    for (const { _resolve } of reader._readRequests) {\n      _resolve(CreateIterResultObject(undefined, true));\n    }\n    reader._readRequests = [];\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  return undefined;\n}\n\nfunction ReadableStreamError(stream, e) {\n  assert(IsReadableStream(stream) === true);\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return undefined;\n  }\n\n  if (IsReadableStreamDefaultReader(reader) === true) {\n    for (const readRequest of reader._readRequests) {\n      readRequest._reject(e);\n    }\n\n    reader._readRequests = [];\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    for (const readIntoRequest of reader._readIntoRequests) {\n      readIntoRequest._reject(e);\n    }\n\n    reader._readIntoRequests = [];\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n  reader._closedPromise.catch(() => {});\n}\n\nfunction ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n  const reader = stream._reader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift();\n  readIntoRequest._resolve(CreateIterResultObject(chunk, done));\n}\n\nfunction ReadableStreamFulfillReadRequest(stream, chunk, done) {\n  const reader = stream._reader;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift();\n  readRequest._resolve(CreateIterResultObject(chunk, done));\n}\n\nfunction ReadableStreamGetNumReadIntoRequests(stream) {\n  return stream._reader._readIntoRequests.length;\n}\n\nfunction ReadableStreamGetNumReadRequests(stream) {\n  return stream._reader._readRequests.length;\n}\n\nfunction ReadableStreamHasBYOBReader(stream) {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (IsReadableStreamBYOBReader(reader) === false) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamHasDefaultReader(stream) {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (IsReadableStreamDefaultReader(reader) === false) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nclass ReadableStreamDefaultReader {\n  constructor(stream) {\n    if (IsReadableStream(stream) === false) {\n      throw new TypeError('ReadableStreamDefaultReader can only be constructed with a ReadableStream instance');\n    }\n    if (IsReadableStreamLocked(stream) === true) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = [];\n  }\n\n  get closed() {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      return Promise.reject(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  cancel(reason) {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      return Promise.reject(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  read() {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      return Promise.reject(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('read from'));\n    }\n\n    return ReadableStreamDefaultReaderRead(this);\n  }\n\n  releaseLock() {\n    if (IsReadableStreamDefaultReader(this) === false) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nclass ReadableStreamBYOBReader {\n  constructor(stream) {\n    if (!IsReadableStream(stream)) {\n      throw new TypeError('ReadableStreamBYOBReader can only be constructed with a ReadableStream instance given a ' +\n          'byte source');\n    }\n    if (IsReadableByteStreamController(stream._readableStreamController) === false) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n          'source');\n    }\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = [];\n  }\n\n  get closed() {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return Promise.reject(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  cancel(reason) {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return Promise.reject(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  read(view) {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return Promise.reject(byobReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return Promise.reject(readerLockException('read from'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return Promise.reject(new TypeError('view must be an array buffer view'));\n    }\n\n    if (IsDetachedBuffer(view.buffer) === true) {\n      return Promise.reject(new TypeError('Cannot read into a view onto a detached ArrayBuffer'));\n    }\n\n    if (view.byteLength === 0) {\n      return Promise.reject(new TypeError('view must have non-zero byteLength'));\n    }\n\n    return ReadableStreamBYOBReaderRead(this, view);\n  }\n\n  releaseLock() {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\n// Abstract operations for the readers.\n\nfunction IsReadableStreamBYOBReader(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsReadableStreamDefaultReader(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamReaderGenericInitialize(reader, stream) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n    reader._closedPromise.catch(() => {});\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nfunction ReadableStreamReaderGenericCancel(reader, reason) {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nfunction ReadableStreamReaderGenericRelease(reader) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n        reader,\n        new TypeError('Reader was released and can no longer be used to monitor the stream\\'s closedness'));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n        reader,\n        new TypeError('Reader was released and can no longer be used to monitor the stream\\'s closedness'));\n  }\n  reader._closedPromise.catch(() => {});\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined;\n}\n\nfunction ReadableStreamBYOBReaderRead(reader, view) {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  // Controllers must implement this.\n  return ReadableByteStreamControllerPullInto(stream._readableStreamController, view);\n}\n\nfunction ReadableStreamDefaultReaderRead(reader) {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return Promise.resolve(CreateIterResultObject(undefined, true));\n  }\n\n  if (stream._state === 'errored') {\n    return Promise.reject(stream._storedError);\n  }\n\n  assert(stream._state === 'readable');\n\n  return stream._readableStreamController[PullSteps]();\n}\n\n// Controllers\n\nclass ReadableStreamDefaultController {\n  constructor() {\n    throw new TypeError();\n  }\n\n  get desiredSize() {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  close() {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (ReadableStreamDefaultControllerCanCloseOrEnqueue(this) === false) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  enqueue(chunk) {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (ReadableStreamDefaultControllerCanCloseOrEnqueue(this) === false) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  error(e) {\n    if (IsReadableStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    const stream = this._controlledReadableStream;\n    if (stream._state !== 'readable') {\n      throw new TypeError(`The stream is ${stream._state} and so cannot be errored`);\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  [CancelSteps](reason) {\n    ResetQueue(this);\n    return this._cancelAlgorithm(reason);\n  }\n\n  [PullSteps]() {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested === true && this._queue.length === 0) {\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      return Promise.resolve(CreateIterResultObject(chunk, false));\n    }\n\n    const pendingPromise = ReadableStreamAddReadRequest(stream);\n    ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    return pendingPromise;\n  }\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (shouldPull === false) {\n    return undefined;\n  }\n\n  if (controller._pulling === true) {\n    controller._pullAgain = true;\n    return undefined;\n  }\n\n  assert(controller._pullAgain === false);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  pullPromise.then(\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain === true) {\n        controller._pullAgain = false;\n        return ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n      return undefined;\n    },\n    e => {\n      ReadableStreamDefaultControllerErrorIfNeeded(controller, e);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n\n  return undefined;\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller) {\n  const stream = controller._controlledReadableStream;\n\n  if (ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) === false) {\n    return false;\n  }\n\n  if (controller._started === false) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  if (desiredSize > 0) {\n    return true;\n  }\n\n  return false;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction ReadableStreamDefaultControllerClose(controller) {\n  const stream = controller._controlledReadableStream;\n\n  assert(ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) === true);\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamClose(stream);\n  }\n}\n\nfunction ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n  const stream = controller._controlledReadableStream;\n\n  assert(ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) === true);\n\n  if (IsReadableStreamLocked(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n\n  return undefined;\n}\n\nfunction ReadableStreamDefaultControllerError(controller, e) {\n  const stream = controller._controlledReadableStream;\n\n  assert(stream._state === 'readable');\n\n  ResetQueue(controller);\n\n  ReadableStreamError(stream, e);\n}\n\nfunction ReadableStreamDefaultControllerErrorIfNeeded(controller, e) {\n  if (controller._controlledReadableStream._state === 'readable') {\n    ReadableStreamDefaultControllerError(controller, e);\n  }\n}\n\nfunction ReadableStreamDefaultControllerGetDesiredSize(controller) {\n  const stream = controller._controlledReadableStream;\n  const state = stream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nfunction ReadableStreamDefaultControllerHasBackpressure(controller) {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller) === true) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n  const state = controller._controlledReadableStream._state;\n\n  if (controller._closeRequested === false && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nfunction SetUpReadableStreamDefaultController(\n  stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined;\n  controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  Promise.resolve(startResult).then(\n    () => {\n      controller._started = true;\n\n      assert(controller._pulling === false);\n      assert(controller._pullAgain === false);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerErrorIfNeeded(controller, r);\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n}\n\nfunction SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark,\n                                                                  sizeAlgorithm) {\n  assert(underlyingSource !== undefined);\n\n  const controller = Object.create(ReadableStreamDefaultController.prototype);\n\n  function startAlgorithm() {\n    return InvokeOrNoop(underlyingSource, 'start', [controller]);\n  }\n\n  const pullAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSource, 'pull', 0, [controller]);\n  const cancelAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingSource, 'cancel', 1, []);\n\n  SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm,\n                                       highWaterMark, sizeAlgorithm);\n}\n\nclass ReadableStreamBYOBRequest {\n  constructor() {\n    throw new TypeError('ReadableStreamBYOBRequest cannot be used directly');\n  }\n\n  get view() {\n    if (IsReadableStreamBYOBRequest(this) === false) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  respond(bytesWritten) {\n    if (IsReadableStreamBYOBRequest(this) === false) {\n      throw byobRequestBrandCheckException('respond');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view.buffer) === true) {\n      throw new TypeError('The BYOB request\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  respondWithNewView(view) {\n    if (IsReadableStreamBYOBRequest(this) === false) {\n      throw byobRequestBrandCheckException('respond');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (IsDetachedBuffer(view.buffer) === true) {\n      throw new TypeError('The supplied view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nclass ReadableByteStreamController {\n  constructor() {\n    throw new TypeError('ReadableByteStreamController constructor cannot be used directly');\n  }\n\n  get byobRequest() {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    if (this._byobRequest === undefined && this._pendingPullIntos.length > 0) {\n      const firstDescriptor = this._pendingPullIntos[0];\n      const view = new Uint8Array(firstDescriptor.buffer,\n                                  firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                  firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n      const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n      SetUpReadableStreamBYOBRequest(byobRequest, this, view);\n      this._byobRequest = byobRequest;\n    }\n\n    return this._byobRequest;\n  }\n\n  get desiredSize() {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  close() {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested === true) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  enqueue(chunk) {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    if (this._closeRequested === true) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('You can only enqueue array buffer views when using a ReadableByteStreamController');\n    }\n\n    if (IsDetachedBuffer(chunk.buffer) === true) {\n      throw new TypeError('Cannot enqueue a view onto a detached ArrayBuffer');\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  error(e) {\n    if (IsReadableByteStreamController(this) === false) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    const stream = this._controlledReadableByteStream;\n    if (stream._state !== 'readable') {\n      throw new TypeError(`The stream is ${stream._state} and so cannot be errored`);\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  [CancelSteps](reason) {\n    if (this._pendingPullIntos.length > 0) {\n      const firstDescriptor = this._pendingPullIntos[0];\n      firstDescriptor.bytesFilled = 0;\n    }\n\n    ResetQueue(this);\n\n    return this._cancelAlgorithm(reason);\n  }\n\n  [PullSteps]() {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream) === true);\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift();\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      let view;\n      try {\n        view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n      } catch (viewE) {\n        return Promise.reject(viewE);\n      }\n\n      return Promise.resolve(CreateIterResultObject(view, false));\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        return Promise.reject(bufferE);\n      }\n\n      const pullIntoDescriptor = {\n        buffer,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        ctor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    const promise = ReadableStreamAddReadRequest(stream);\n\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n\n    return promise;\n  }\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nfunction IsReadableByteStreamController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsReadableStreamBYOBRequest(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller) {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (shouldPull === false) {\n    return undefined;\n  }\n\n  if (controller._pulling === true) {\n    controller._pullAgain = true;\n    return undefined;\n  }\n\n  assert(controller._pullAgain === false);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  pullPromise.then(\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain === true) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      if (controller._controlledReadableByteStream._state === 'readable') {\n        ReadableByteStreamControllerError(controller, e);\n      }\n    }\n  )\n  .catch(rethrowAssertionErrorRejection);\n\n  return undefined;\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = [];\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.ctor(\n      pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue[0];\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    ArrayBufferCopy(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (ready === false) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos[0] === pullIntoDescriptor);\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested === true) {\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n  if (controller._byobRequest === undefined) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined;\n  controller._byobRequest._view = undefined;\n  controller._byobRequest = undefined;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n  assert(controller._closeRequested === false);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos[0];\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) === true) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerPullInto(controller, view) {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = view.constructor.BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor;\n\n  const buffer = TransferArrayBuffer(view.buffer);\n  const pullIntoDescriptor = {\n    buffer,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    return ReadableStreamAddReadIntoRequest(stream);\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new view.constructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    return Promise.resolve(CreateIterResultObject(emptyView, true));\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) === true) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      return Promise.resolve(CreateIterResultObject(filledView, false));\n    }\n\n    if (controller._closeRequested === true) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      return Promise.reject(e);\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  const promise = ReadableStreamAddReadIntoRequest(stream);\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n\n  return promise;\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream) === true) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n  if (pullIntoDescriptor.bytesFilled + bytesWritten > pullIntoDescriptor.byteLength) {\n    throw new RangeError('bytesWritten out of range');\n  }\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    // TODO: Figure out whether we should detach the buffer or not here.\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = pullIntoDescriptor.buffer.slice(end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n  const firstDescriptor = controller._pendingPullIntos[0];\n\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(stream._state === 'readable');\n\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(controller) {\n  const descriptor = controller._pendingPullIntos.shift();\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested === true) {\n    return false;\n  }\n\n  if (controller._started === false) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) === true && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) === true && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableByteStreamControllerGetDesiredSize(controller) > 0) {\n    return true;\n  }\n\n  return false;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nfunction ReadableByteStreamControllerClose(controller) {\n  const stream = controller._controlledReadableByteStream;\n\n  assert(controller._closeRequested === false);\n  assert(stream._state === 'readable');\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos[0];\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableStreamClose(stream);\n}\n\nfunction ReadableByteStreamControllerEnqueue(controller, chunk) {\n  const stream = controller._controlledReadableByteStream;\n\n  assert(controller._closeRequested === false);\n  assert(stream._state === 'readable');\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (ReadableStreamHasDefaultReader(stream) === true) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream) === true) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(IsReadableStreamLocked(stream) === false);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n}\n\nfunction ReadableByteStreamControllerError(controller, e) {\n  const stream = controller._controlledReadableByteStream;\n\n  assert(stream._state === 'readable');\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableStreamError(stream, e);\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller) {\n  const stream = controller._controlledReadableByteStream;\n  const state = stream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction ReadableByteStreamControllerRespond(controller, bytesWritten) {\n  bytesWritten = Number(bytesWritten);\n  if (IsFiniteNonNegativeNumber(bytesWritten) === false) {\n    throw new RangeError('bytesWritten must be a finite');\n  }\n\n  assert(controller._pendingPullIntos.length > 0);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nfunction ReadableByteStreamControllerRespondWithNewView(controller, view) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos[0];\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.byteLength !== view.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n\n  firstDescriptor.buffer = view.buffer;\n\n  ReadableByteStreamControllerRespondInternal(controller, view.byteLength);\n}\n\nfunction SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm,\n                                           highWaterMark, autoAllocateChunkSize) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(Number.isInteger(autoAllocateChunkSize) === true);\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = ValidateAndNormalizeHighWaterMark(highWaterMark);\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = [];\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  Promise.resolve(startResult).then(\n      () => {\n        controller._started = true;\n\n        assert(controller._pulling === false);\n        assert(controller._pullAgain === false);\n\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      },\n      r => {\n        if (stream._state === 'readable') {\n          ReadableByteStreamControllerError(controller, r);\n        }\n      }\n  )\n      .catch(rethrowAssertionErrorRejection);\n}\n\nfunction SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n  assert(underlyingByteSource !== undefined);\n\n  const controller = Object.create(ReadableByteStreamController.prototype);\n\n  function startAlgorithm() {\n    return InvokeOrNoop(underlyingByteSource, 'start', [controller]);\n  }\n\n  const pullAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingByteSource, 'pull', 0, [controller]);\n  const cancelAlgorithm = CreateAlgorithmFromUnderlyingMethod(underlyingByteSource, 'cancel', 1, []);\n\n  const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize !== undefined) {\n    if (Number.isInteger(autoAllocateChunkSize) === false || autoAllocateChunkSize <= 0) {\n      throw new RangeError('autoAllocateChunkSize must be a positive integer');\n    }\n  }\n\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark,\n                                    autoAllocateChunkSize);\n}\n\nfunction SetUpReadableStreamBYOBRequest(request, controller, view) {\n  assert(IsReadableByteStreamController(controller) === true);\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view) === true);\n  assert(IsDetachedBuffer(view.buffer) === false);\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name) {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n\n// Helper functions for the readers.\n\nfunction readerLockException(name) {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n\nfunction defaultReaderClosedPromiseInitialize(reader) {\n  reader._closedPromise = new Promise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nfunction defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n  reader._closedPromise = Promise.reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nfunction defaultReaderClosedPromiseInitializeAsResolved(reader) {\n  reader._closedPromise = Promise.resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nfunction defaultReaderClosedPromiseReject(reader, reason) {\n  assert(reader._closedPromise_resolve !== undefined);\n  assert(reader._closedPromise_reject !== undefined);\n\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nfunction defaultReaderClosedPromiseResetToRejected(reader, reason) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  reader._closedPromise = Promise.reject(reason);\n}\n\nfunction defaultReaderClosedPromiseResolve(reader) {\n  assert(reader._closedPromise_resolve !== undefined);\n  assert(reader._closedPromise_reject !== undefined);\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction byobReaderBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name) {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name) {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n\n// Helper function for ReadableStream pipeThrough\n\nfunction ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue(promise) {\n  try {\n    // This relies on the brand-check that is enforced by Promise.prototype.then(). As with the rest of the reference\n    // implementation, it doesn't attempt to do the right thing if someone has modified the global environment.\n    Promise.prototype.then.call(promise, undefined, () => {});\n  } catch (e) {\n    // The brand check failed, therefore the internal slot is not present and there's nothing further to do.\n  }\n}\n","'use strict';\nconst { createDataProperty } = require('./helpers.js');\n\nmodule.exports = class ByteLengthQueuingStrategy {\n  constructor({ highWaterMark }) {\n    createDataProperty(this, 'highWaterMark', highWaterMark);\n  }\n\n  size(chunk) {\n    return chunk.byteLength;\n  }\n};\n","'use strict';\nconst { createDataProperty } = require('./helpers.js');\n\nmodule.exports = class CountQueuingStrategy {\n  constructor({ highWaterMark }) {\n    createDataProperty(this, 'highWaterMark', highWaterMark);\n  }\n\n  size() {\n    return 1;\n  }\n};\n","'use strict';\nconst assert = require('better-assert');\n\n// Calls to verbose() are purely for debugging the reference implementation and tests. They are not part of the standard\n// and do not appear in the standard text.\nconst verbose = require('debug')('streams:transform-stream:verbose');\nconst { InvokeOrNoop, CreateAlgorithmFromUnderlyingMethod, PromiseCall, typeIsObject,\n        ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber,\n        MakeSizeAlgorithmFromSizeFunction } = require('./helpers.js');\nconst { CreateReadableStream, ReadableStreamDefaultControllerClose, ReadableStreamDefaultControllerEnqueue,\n        ReadableStreamDefaultControllerError, ReadableStreamDefaultControllerGetDesiredSize,\n        ReadableStreamDefaultControllerHasBackpressure,\n        ReadableStreamDefaultControllerCanCloseOrEnqueue } = require('./readable-stream.js');\nconst { CreateWritableStream, WritableStreamDefaultControllerErrorIfNeeded } = require('./writable-stream.js');\n\n// Class TransformStream\n\nclass TransformStream {\n  constructor(transformer = {}, writableStrategy = {}, readableStrategy = {}) {\n    const readableType = transformer.readableType;\n\n    if (readableType !== undefined) {\n      throw new RangeError('Invalid readable type specified');\n    }\n\n    const writableType = transformer.writableType;\n\n    if (writableType !== undefined) {\n      throw new RangeError('Invalid writable type specified');\n    }\n\n    const writableSizeFunction = writableStrategy.size;\n    const writableSizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(writableSizeFunction);\n    let writableHighWaterMark = writableStrategy.highWaterMark;\n    if (writableHighWaterMark === undefined) {\n      writableHighWaterMark = 1;\n    }\n    writableHighWaterMark = ValidateAndNormalizeHighWaterMark(writableHighWaterMark);\n\n    const readableSizeFunction = readableStrategy.size;\n    const readableSizeAlgorithm = MakeSizeAlgorithmFromSizeFunction(readableSizeFunction);\n    let readableHighWaterMark = readableStrategy.highWaterMark;\n    if (readableHighWaterMark === undefined) {\n      readableHighWaterMark = 0;\n    }\n    readableHighWaterMark = ValidateAndNormalizeHighWaterMark(readableHighWaterMark);\n\n    let startPromise_resolve;\n    const startPromise = new Promise(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                              readableSizeAlgorithm);\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    const startResult = InvokeOrNoop(transformer, 'start', [this._transformStreamController]);\n    startPromise_resolve(startResult);\n  }\n\n  get readable() {\n    if (IsTransformStream(this) === false) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  get writable() {\n    if (IsTransformStream(this) === false) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\n// Transform Stream Abstract Operations\n\nfunction CreateTransformStream(startAlgorithm, transformAlgorithm, flushAlgorithm, writableHighWaterMark = 1,\n                               writableSizeAlgorithm = () => 1, readableHighWaterMark = 0,\n                               readableSizeAlgorithm = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve;\n  const startPromise = new Promise(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm,\n                                   readableHighWaterMark, readableSizeAlgorithm) {\n  function startAlgorithm() {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk) {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm() {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream);\n  }\n\n  function closeAlgorithm() {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm() {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason) {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return Promise.resolve();\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined;\n  stream._backpressureChangePromise = undefined;\n  stream._backpressureChangePromise_resolve = undefined;\n  TransformStreamSetBackpressure(stream, true);\n\n  // Used by IsWritableStream() which is called by SetUpTransformStreamDefaultController().\n  stream._transformStreamController = undefined;\n}\n\nfunction IsTransformStream(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream, e) {\n  verbose('TransformStreamError()');\n\n  if (stream._readable._state === 'readable') {\n    ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n  }\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure === true) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream, backpressure) {\n  verbose(`TransformStreamSetBackpressure() [backpressure = ${backpressure}]`);\n\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = new Promise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\nclass TransformStreamDefaultController {\n  constructor() {\n    throw new TypeError('TransformStreamDefaultController instances cannot be created directly');\n  }\n\n  get desiredSize() {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n  }\n\n  enqueue(chunk) {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  error(reason) {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  terminate() {\n    if (IsTransformStreamDefaultController(this) === false) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n  assert(IsTransformStream(stream) === true);\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n  assert(transformer !== undefined);\n\n  const controller = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = chunk => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk);\n      return Promise.resolve();\n    } catch (transformResultE) {\n      return Promise.reject(transformResultE);\n    }\n  };\n  const transformMethod = transformer.transform;\n  if (transformMethod !== undefined) {\n    if (typeof transformMethod !== 'function') {\n      throw new TypeError('transform is not a method');\n    }\n    transformAlgorithm = chunk => {\n      const transformPromise = PromiseCall(transformMethod, transformer, [chunk, controller]);\n      return transformPromise.catch(e => {\n        TransformStreamError(stream, e);\n        throw e;\n      });\n    };\n  }\n\n  const flushAlgorithm = CreateAlgorithmFromUnderlyingMethod(transformer, 'flush', 0, [controller]);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerEnqueue(controller, chunk) {\n  verbose('TransformStreamDefaultControllerEnqueue()');\n\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController;\n  if (ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController) === false) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure === true);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller, e) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerTerminate(controller) {\n  verbose('TransformStreamDefaultControllerTerminate()');\n\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController;\n\n  if (ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController) === true) {\n    ReadableStreamDefaultControllerClose(readableController);\n  }\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n  verbose('TransformStreamDefaultSinkWriteAlgorithm()');\n\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure === true) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return backpressureChangePromise\n        .then(() => {\n          const writable = stream._writable;\n          const state = writable._state;\n          if (state === 'erroring') {\n            throw writable._storedError;\n          }\n          assert(state === 'writable');\n          return controller._transformAlgorithm(chunk);\n        });\n  }\n\n  return controller._transformAlgorithm(chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream) {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  const e = new TypeError('Writable side aborted');\n  TransformStreamError(stream, e);\n  return Promise.resolve();\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm(stream) {\n  verbose('TransformStreamDefaultSinkCloseAlgorithm()');\n\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const flushPromise = stream._transformStreamController._flushAlgorithm();\n  // Return a promise that is fulfilled with undefined on success.\n  return flushPromise.then(() => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    const readableController = readable._readableStreamController;\n    if (ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController) === true) {\n      ReadableStreamDefaultControllerClose(readableController);\n    }\n  }).catch(r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream) {\n  verbose('TransformStreamDefaultSourcePullAlgorithm()');\n\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure === true);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\nmodule.exports = { CreateTransformStream, TransformStream };\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name) {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name) {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n","import {\n  ByteLengthQueuingStrategy,\n  CountQueuingStrategy,\n  ReadableStream,\n  TransformStream,\n  WritableStream\n} from './ponyfill';\nimport { globals } from './utils';\n\n// Export\nexport * from './ponyfill';\n\nconst exports = {\n  ReadableStream,\n  WritableStream,\n  ByteLengthQueuingStrategy,\n  CountQueuingStrategy,\n  TransformStream\n};\n\n// Add classes to global scope\nif (typeof globals !== 'undefined') {\n  Object.assign(globals, exports);\n}\n"],"names":["noop","globals","self","window","global","isFakeDetached","Symbol","Call","F","V","args","TypeError","Function","prototype","apply","call","PromiseCall","Promise","resolve","value","reject","x","o","p","v","defineProperty","writable","enumerable","configurable","elements","slice","dest","destOffset","src","srcOffset","n","Uint8Array","set","done","obj","exports","IsNonNegativeNumber","Infinity","Number","isNaN","underlyingObject","methodName","algoArgCount","extraArgs","method","undefined","fullArgs","arg","concat","O","P","transferredIshVersion","highWaterMark","RangeError","size","chunk","e","constructor","assert","AssertionError","IsFiniteNonNegativeNumber","require$$0","pair","container","_queue","shift","_queueTotalSize","push","CreateAlgorithmFromUnderlyingMethod","require$$1","InvokeOrNoop","ValidateAndNormalizeHighWaterMark","MakeSizeAlgorithmFromSizeFunction","typeIsObject","rethrowAssertionErrorRejection","require$$2","DequeueValue","require$$3","EnqueueValueWithSize","PeekQueueValue","ResetQueue","AbortSteps","ErrorSteps","WritableStream","underlyingSink","this","type","sizeAlgorithm","stream","controller","Object","create","WritableStreamDefaultController","writeAlgorithm","closeAlgorithm","abortAlgorithm","abort","reason","IsWritableStream","streamBrandCheckException","IsWritableStreamLocked","WritableStreamAbort","getWriter","AcquireWritableStreamDefaultWriter","startAlgorithm","writer","_ownerWritableStream","state","_state","WritableStreamCloseQueuedOrInFlight","_storedError","WritableStreamDefaultWriterClose","WritableStreamDefaultWriter","InitializeWritableStream","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","hasOwnProperty","error","wasAlreadyErroring","promise","WritableStreamDealWithRejection","WritableStreamStartErroring","WritableStreamHasOperationMarkedInFlight","_started","WritableStreamFinishErroring","storedError","_reject","abortRequest","_wasAlreadyErroring","_reason","then","_resolve","WritableStreamFinishInFlightClose","_closedPromise_resolve","_closedPromise_reject","_closedPromiseState","WritableStreamRejectCloseAndClosedPromiseIfNeeded","_closedPromise","catch","WritableStreamUpdateBackpressure","backpressure","_readyPromise","_readyPromise_resolve","_readyPromise_reject","_readyPromiseState","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultWriterAbort","close","releaseLock","write","WritableStreamDefaultWriterWrite","WritableStreamDefaultControllerGetDesiredSize","WritableStreamDefaultWriterGetDesiredSize","closeRequest","WritableStreamDefaultWriterEnsureClosedPromiseRejected","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamDefaultWriterRelease","releasedError","chunkSize","_strategySizeAlgorithm","chunkSizeE","WritableStreamDefaultControllerGetChunkSize","writeRequest","WritableStreamAddWriteRequest","writeRecord","enqueueE","_controlledWritableStream","WritableStreamDefaultControllerGetBackpressure","IsWritableStreamDefaultController","_abortAlgorithm","SetUpWritableStreamDefaultController","_strategyHWM","_writeAlgorithm","_closeAlgorithm","startResult","r","WritableStreamDefaultControllerAdvanceQueueIfNeeded","length","WritableStreamDefaultControllerErrorIfNeeded","WritableStreamDefaultControllerError","name","defaultWriterClosedPromiseInitialize","defaultWriterClosedPromiseReject","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterReadyPromiseResolve","ArrayBufferCopy","CreateIterResultObject","IsDetachedBuffer","TransferArrayBuffer","createArrayFromList","WritableStreamDefaultWriterCloseWithErrorPropagation","CancelSteps","PullSteps","ReadableStream","underlyingSource","String","underlyingByteSource","ReadableByteStreamController","pullAlgorithm","cancelAlgorithm","autoAllocateChunkSize","isInteger","ReadableStreamDefaultController","cancel","IsReadableStream","IsReadableStreamLocked","ReadableStreamCancel","getReader","mode","AcquireReadableStreamDefaultReader","ReadableStreamBYOBReader","AcquireReadableStreamBYOBReader","pipeThrough","options","readable","pipeTo","preventClose","preventAbort","preventCancel","Boolean","reader","shuttingDown","currentWrite","action","destClosed","waitForWritesToFinish","oldCurrentWrite","isOrBecomesErrored","shutdownWithAction","originalIsError","originalError","doTheRest","finalize","newError","shutdown","isError","pipeLoop","ReadableStreamDefaultReaderRead","err","tee","branches","cloneForBranch2","closedOrErrored","canceled1","canceled2","reason1","reason2","branch1","branch2","resolveCancelPromise","cancelPromise","result","_readableStreamController","value1","value2","CreateReadableStream","compositeReason","cancelResult","ReadableStreamTee","_disturbed","ReadableStreamDefaultControllerShouldCallPull","ReadableStreamDefaultReader","InitializeReadableStream","_reader","ReadableStreamAddReadIntoRequest","readIntoRequest","_readIntoRequests","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamClose","IsReadableStreamDefaultReader","ReadableStreamError","ReadableStreamFulfillReadRequest","ReadableStreamGetNumReadIntoRequests","ReadableStreamGetNumReadRequests","ReadableStreamHasBYOBReader","IsReadableStreamBYOBReader","ReadableStreamHasDefaultReader","defaultReaderBrandCheckException","_ownerReadableStream","readerLockException","ReadableStreamReaderGenericCancel","read","IsReadableByteStreamController","byobReaderBrandCheckException","view","ArrayBuffer","isView","buffer","byteLength","_controlledReadableByteStream","elementSize","DataView","BYTES_PER_ELEMENT","ctor","pullIntoDescriptor","byteOffset","_pendingPullIntos","emptyView","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","_closeRequested","ReadableByteStreamControllerPullInto","ReadableStreamBYOBReaderRead","ReadableStreamReaderGenericInitialize","ReadableStreamReaderGenericRelease","IsReadableStreamDefaultController","defaultControllerBrandCheckException","ReadableStreamDefaultControllerCanCloseOrEnqueue","enqueue","ReadableStreamDefaultControllerEnqueue","_controlledReadableStream","_cancelAlgorithm","pendingPromise","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCallPullIfNeeded","_pulling","_pullAlgorithm","_pullAgain","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerErrorIfNeeded","SetUpReadableStreamDefaultController","ReadableStreamBYOBRequest","respond","bytesWritten","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_associatedReadableByteStreamController","_view","respondWithNewView","firstDescriptor","bytesFilled","byteStreamControllerBrandCheckException","firstPendingPullInto","transferredBuffer","transferredView","entry","viewE","_autoAllocateChunkSize","bufferE","_byobRequest","byobRequest","request","ReadableByteStreamControllerGetDesiredSize","ReadableByteStreamControllerCallPullIfNeeded","ReadableByteStreamControllerShouldCallPull","ReadableByteStreamControllerClearPendingPullIntos","ReadableByteStreamControllerCommitPullIntoDescriptor","readerType","ReadableByteStreamControllerEnqueueChunkToQueue","currentAlignedBytes","maxBytesToCopy","Math","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableByteStreamControllerHandleQueueDrain","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerRespondInternal","ReadableByteStreamControllerShiftPendingPullInto","remainderSize","end","remainder","descriptor","ReadableByteStreamControllerError","SetUpReadableByteStreamController","defaultReaderClosedPromiseReject","createDataProperty","ReadableStreamDefaultControllerHasBackpressure","CreateWritableStream","TransformStream","transformer","writableStrategy","readableStrategy","readableType","writableType","writableSizeFunction","writableSizeAlgorithm","writableHighWaterMark","readableSizeFunction","readableSizeAlgorithm","readableHighWaterMark","startPromise_resolve","TransformStreamDefaultController","transformAlgorithm","transformResultE","transformMethod","transform","transformPromise","flushAlgorithm","_transformStreamController","IsTransformStream","_readable","_writable","InitializeTransformStream","startPromise","backpressureChangePromise","_backpressureChangePromise","_transformAlgorithm","TransformStreamDefaultSinkWriteAlgorithm","_flushAlgorithm","readableController","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamDefaultSourcePullAlgorithm","_backpressureChangePromise_resolve","TransformStreamError","TransformStreamErrorWritableAndUnblockWrite","TransformStreamSetBackpressure","IsTransformStreamDefaultController","_controlledTransformStream","terminate","SetUpTransformStreamDefaultController","TransformStreamDefaultControllerEnqueue","CreateTransformStream"],"mappings":"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"}